// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


// ========= MODELOS PRINCIPALES =========

model Platform {
  uuid      String    @id @default(uuid()) @map("uuid_Platform")
  name      String?   @map("name_Platform")
  url       String?   @map("url_Platform")
  logoUrl   String?   @map("logoUrl_Platform")
  
  // Relaciones: Una plataforma tiene muchos canales y categorías
  channels  Channel[]
  categories Category[]

  @@map("_platform")
}

model User {
  uuid          String  @id @default(uuid()) @map("uuid_User")
  firstName     String? @map("firstName_User")
  lastName      String? @map("lastName_User")
  password      String  @map("password_User")
  email         String  @unique @map("email_User")
  companyName   String? @map("companyName_User")

  // Relación: Un usuario puede tener muchos análisis
  analysis      Analysis[]

  @@map("_user")
}

model Category {
  uuid         String   @id @default(uuid()) @map("uuid_Category")
  name         String?  @map("name_Category")
  currentViewers Int?   @map("currentViewers_Category")

  // Relación con Platform
  platform     Platform @relation(fields: [platformId], references: [uuid])
  platformId   String   @map("Platform_uuid_Platform")
  
  // Relación: Una categoría puede estar en muchos livestreams
  livestreams  Livestream[]

  @@map("_category")
}

model Channel {
  uuid          String      @id @default(uuid()) @map("uuid_Channel")
  name          String?     @map("name_Channel")
  followers     Int?        @map("followers_Channel")
  lastSeenAt    String?     @map("lastSeenAt_Channel")
  description   String?     @map("description_Channel")

  // Relación con Platform
  platform      Platform    @relation(fields: [platformId], references: [uuid])
  platformId    String      @map("Platform_uuid_Platform")
  
  // Relaciones: Un canal tiene muchos análisis, livestreams y VODs
  analysis      Analysis[]
  livestreams   Livestream[]
  videosOnDemand VideoOnDemand[]

  @@map("_channel")
}


// ========= MODELOS DE RELACIONES =========

model Analysis {
  uuid        String   @id @default(uuid()) @map("uuid_Analysis")
  title       String?  @map("title_Analysis")

  // Relación con User
  user        User     @relation(fields: [userId], references: [uuid])
  userId      String   @map("User_uuid_User")

  // Relación con Channel
  channel     Channel  @relation(fields: [channelId], references: [uuid])
  channelId   String   @map("Channel_uuid_Channel")

  @@map("_analysis")
}

model Livestream {
  uuid            String    @id @default(uuid()) @map("uuid_Livestream")
  title           String?   @map("title_Livestream")
  thumbnailUrl    String?   @map("thumbnailUrl_Livestream")
  language        String?   @map("language_Livestream")
  startedAt       String?   @map("startedAt_Livestream")
  currentViewers  Int?      @map("currentViewers_Livestream")
  matureContent   Boolean?  @map("matureContent_Livestream")

  // Relación con Channel
  channel         Channel   @relation(fields: [channelId], references: [uuid])
  channelId       String    @map("Channel_uuid_Channel")

  // Relación con Category
  category        Category  @relation(fields: [categoryId], references: [uuid])
  categoryId      String    @map("Category_uuid_Category")

  @@map("_livestream")
}

model VideoOnDemand {
  uuid          String    @id @default(uuid()) @map("uuid_VOD")
  title         String?   @map("title_VOD")
  duration      Int?      @map("duration_VOD")
  views         Int?      @map("views_VOD")
  matureContent Boolean?  @map("matureContent_VOD")

  // Relación con Channel
  channel       Channel   @relation(fields: [channelId], references: [uuid])
  channelId     String    @map("Channel_uuid_Channel")

  @@map("_videoondemand")
}


// ========= MODELOS INDEPENDIENTES (DATASETS) =========

model DataSet {
  uuid              String    @id @default(uuid()) @map("uuid_dataSet")
  channelName       String?   @map("channelName_dataSet")
  averageViewers    Int?      @map("averageViewers_dataSet")
  hoursWatched      Int?      @map("hoursWatched_dataSet")
  maxViewers        Int?      @map("maxViewers_dataSet")
  minutesStreamed   Int?      @map("minutesStreamed_dataSet")
  followersGained   Int?      @map("followersGained_dataSet")
  totalFollowers    Int?      @map("totalFollowers_dataSet")
  rank              Int?      @map("rank_dataSet")
  fechaRegistro     String?   @map("fechaRegistro_dataSet")

  @@map("_dataset")
}

model DataSetKick {
  uuid              String    @id @default(uuid()) @map("uuid_dataSetKick")
  channelName       String?   @map("channelName_dataSetKick")
  channelPfp        String?   @map("channelPfp_dataSetKick")
  rank              Int?      @map("rank_dataSetKick")
  averageViewers    Int?      @map("averageViewers_dataSetKick")
  hoursWatched      Int?      @map("hoursWatched_dataSetKick")
  maxViewers        Int?      @map("maxViewers_dataSetKick")
  hoursStreamed     Int?      @map("hoursStreamed_dataSetKick")
  totalFollowers    Int?      @map("totalFollowers_dataSetKick")
  language          String?   @map("language_dataSetKick")
  rankVariation     String?   @map("rankVariation_dataSetKick")
  fechaRegistro     String?   @map("fechaRegistro_dataSetKick")

  @@map("_datasetkick")
}